syntax = "proto3";
import "google/protobuf/empty.proto";

package raft;

enum Status {
  SUCCESS = 0;
  FAILURE_NOT_LEADER = 1;
  FAILURE_DUPLICATE_PORT = 2;
}

message LogEntry {
  int32 term = 1;
  string command = 2;
}

message RequestVoteRequest {
  int32 term = 1;
  int32 candidate_id = 2;
  int32 last_log_index = 3;
  int32 last_log_term = 4;
}

message RequestVoteResponse {
  int32 term = 1;
  bool vote_granted = 2;
}

message AppendEntriesRequest {
  int32 term = 1;
  int32 prev_log_index = 2;
  int32 prev_log_term = 3;
  LogEntry entry = 4;
}

message AppendEntriesResponse {
  int32 term = 1;
  bool success = 2;
}
message CheckLeaderRequest {
  string clientID = 1;     // Optional
}

message CheckLeaderResponse {
  bool isLeader = 1;    // True if this server is the leader
  int32 leaderPort = 2;  // Optional: Port of the leader if known
}
message SendMessageRequest {
  string message = 1; 
}

message SendMessageResponse {
  bool isSuccessful = 1;    
  bool isLeader = 2;  
}
message HeartBeat{
  int32 leader_id = 1;
}

message HeartBeatResponse{
  string message = 1;
}

message ConnectLeaderRequest {
  int32 secondary_port = 1;
}

message ConnectLeaderResponse {
  Status status = 1;
  int32 node_id = 2;
  int32 leader_id = 3;
  repeated int32 other_ports = 4;
  string log_file = 5;
}

message NewNodeBoardcastRequest {
  int32 node_port = 1;
}

service RaftService {
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
  rpc CheckLeader(CheckLeaderRequest) returns (CheckLeaderResponse);
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  rpc DetectHeartBeats(HeartBeat) returns (google.protobuf.Empty);
  rpc ConnectLeader(ConnectLeaderRequest) returns(ConnectLeaderResponse);
  rpc NewNodeBoardcast(NewNodeBoardcastRequest) returns(google.protobuf.Empty);
}